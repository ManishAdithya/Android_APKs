import requests
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import base64

def decrypt_aes(encrypted_data, key):
    try:
        encrypted_bytes = base64.b64decode(encrypted_data)
        key_bytes = key.encode('utf-8')
        iv = encrypted_bytes[:16]
        ciphertext = encrypted_bytes[16:]
        cipher = AES.new(key_bytes, AES.MODE_CBC, iv)
        decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size)
        return decrypted.decode('utf-8')
    except Exception as e:
        print(f"Decryption failed: {str(e)}")
        return None

CONFIG = {
    "encrypted": {
        "core": "Mn6J47+7OPh5Oev9UkTH5MgASX+WlZSOeIjODT0C5pXGF6iwsTh28tTdh74zqBWF",
        "account": "0p1SEi9/UkhuMhUGx+2aEvOJ+IioKHaw5nQNHqyo6hghj9+lE1EcLCS202UN40ZRqYyfOrbuIiyJ5cKVOdU79A==",
        "namespace": "i8BzP5dpLusLyVaMQfyT9GT3JkMNNUJEYKEG9KYIkECid2rLn3PL+H1TGaNdHF406tjdEMBHTHLoiEr9zsParg=="
    },
    "api_token": "xRnT8VHZvt-dZbA3WDUk0IWPrr8yfu9CmpMWSjIF",
    "key": "&hX2aJ7$SdfW8!zQ9uB1Yx4LmN$XvG8C"
}

decrypted = {
    "core": decrypt_aes(CONFIG["encrypted"]["core"], CONFIG["key"]),
    "account": decrypt_aes(CONFIG["encrypted"]["account"], CONFIG["key"]),
    "namespace": decrypt_aes(CONFIG["encrypted"]["namespace"], CONFIG["key"])
}

if None in decrypted.values():
    print("Failed to decrypt required components. Check your key and encrypted values.")
else:
    URL = f"https://{decrypted['core']}/client/v4/accounts/{decrypted['account']}/storage/kv/namespaces/{decrypted['namespace']}/values/test"
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {CONFIG['api_token']}"
    }

    print("Attempting Cloudflare API Access...")
    print(f"Endpoint: {URL}")
    print(f"Token: {CONFIG['api_token'][:4]}...{CONFIG['api_token'][-4:]}")

    try:
        response = requests.get(URL, headers=headers)
        
        print(f"\nResponse Status: {response.status_code}")
        print("Response Headers:")
        for header, value in response.headers.items():
            print(f"  {header}: {value}")
        
        if response.status_code == 200:
            # Handle binary response
            print("\nRaw Response (hex):", response.content.hex())
            
            # Try to decode as UTF-8 (if it's text)
            try:
                print("\nDecoded as UTF-8:", response.content.decode('utf-8'))
            except UnicodeDecodeError:
                print("\nContent is not UTF-8 text (likely binary data)")
                
            # If you expect base64 encoded data
            try:
                decoded = base64.b64decode(response.content)
                print("\nBase64 Decoded:", decoded)
                print("Hex:", decoded.hex())
            except:
                print("\nContent is not base64 encoded")
        else:
            print(f"\nError {response.status_code}:")
            print(response.text)
            
    except requests.exceptions.RequestException as e:
        print(f"\nRequest failed: {str(e)}")